const { EventEmitter } = require('events');
const fs = require('fs');
const { spawn } = require('child_process');
const path = require('path');
const zlib = require('zlib');
const logger = require('anode-fun-logger');

class OwnGzip extends EventEmitter {
    constructor(config) {
        super();

        if (!config.sourceFolder || !config.targetFolder) {
            throw Error('Source and Target folders must be set in config object.');
        }

        this.logger = config.logger || process.stdout;
        
        this.sourceFolder = config.sourceFolder;
        this.targetFolder = config.targetFolder;
        this.fileType = config.fileType;
        
        this.init();
    }

    init() {
        this.logger.write(`[INFO] Initializing...\n`);
        
        spawn('mkdir', ['-p', this.targetFolder])
            .on('exit', () => this.emit('target-is-ready'));
    }
    
    zip() {
        this.on('target-is-ready', () => {
            fs.readdir(this.sourceFolder, (err, files) => {
                if (err) {
                    throw err;
                }
                const filteredFiles = files.filter(file => this.filter(file, this.fileType));

                if (!filteredFiles.length) {
                    this.logger.write(`[ERROR] Zip: no files found...\n`);
                    return;
                }

                filteredFiles.forEach(file => {
                        const fileSourcePath = path.resolve([this.sourceFolder, file].join('/'));
                        const fileTargetPath = path.resolve([this.targetFolder, file].join('/') + '.gz');
                        this.logger.write(`[INFO] Gzipping file:\n"${fileSourcePath}" => "${fileTargetPath}"\n`);
                        fs.createReadStream(fileSourcePath)
                            .pipe(zlib.createGzip())
                            .pipe(fs.createWriteStream(fileTargetPath));
                    });
            });
        });
    }

    unzip() {
        this.on('target-is-ready', () => {
            fs.readdir(this.sourceFolder, (err, files) => {
                if (err) {
                    throw err;
                }

                const filteredFiles = files.filter(file => this.filter(file, this.fileType));

                if (!filteredFiles.length) {
                    this.logger.write(`[ERROR] Unzip: no files found...\n`);
                    return;
                }
                            
                filteredFiles.forEach(file => {
                        const fileSourcePath = path.resolve([this.sourceFolder, file].join('/'));
                        const fileTargetPath = path.resolve([this.targetFolder, file.replace(/\.gz$/, '')].join('/'));
                        this.logger.write(`[INFO] Unziping file:\n"${fileSourcePath}" => "${fileTargetPath}"\n`);
                        fs.createReadStream(fileSourcePath)
                            .pipe(zlib.createGunzip())
                            .pipe(fs.createWriteStream(fileTargetPath));
                    });
            });
        });
    }

    filter(file, fileType) {
        return file.match(new RegExp(`${fileType}$`));
    }
}

module.exports = OwnGzip;